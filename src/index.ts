import 'dotenv/config';
import { Bot, GrammyError, HttpError, InlineKeyboard, InputFile, session } from 'grammy';
import mongoose from 'mongoose';
import { hydrate } from '@grammyjs/hydrate';
import { MyContext } from './types.js';
import { start, profile, productsCommand, payments, telegramSuccessPaymentHsndler, generate } from './commands/index.js';
import {
  type Conversation,
  type ConversationFlavor,
  conversations,
  createConversation,
} from "@grammyjs/conversations";
import { generateConversation } from './conversations/generateConversation.js';
import { menuKeyboard } from './keyboards/menuKeyboard.js';

const botApiKey = process.env.BOT_TOKEN;
if (!botApiKey) {
  throw new Error('BOT_TOKEN is not defined in the environment variables');
}
const bot = new Bot<MyContext>(botApiKey);

bot.on('pre_checkout_query', (ctx) => {
  ctx.answerPreCheckoutQuery(true)
})

bot.use(hydrate());

bot.use(session({ initial: () => ({}) }));

// 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
bot.use(conversations());

// 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥ –≤ –±–æ—Ç–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º "generate"
bot.use(createConversation(generateConversation, "generate"));

bot.on(':successful_payment', telegramSuccessPaymentHsndler)

// –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.command('start', start);
bot.callbackQuery('menu', async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
} catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    console.error('Error answering callback query:', errorMessage);
    // Optionally handle the error (e.g., ignore if it's just a timeout)
}

  ctx.callbackQuery.message?.editText(`
    ‚ú® –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!
–û—Ç—Å—é–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõçÔ∏è –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§.
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è
`, {
    reply_markup: menuKeyboard
  });
})

bot.callbackQuery('products', productsCommand)

bot.callbackQuery('profile', profile)

bot.callbackQuery('generate', async (ctx) => {
  console.log('[COMMAND] /generate received');
  await ctx.conversation.enter("generate");
})
// bot.command("generate", async (ctx) => {
//   console.log('[COMMAND] /generate received');
//   await ctx.conversation.enter("generate");
// });

bot.callbackQuery(/^buyProduct-\d+$/, payments)

bot.callbackQuery('backToMenu', async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
  } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      console.error('Error answering callback query:', errorMessage);
      // Optionally handle the error (e.g., ignore if it's just a timeout)
  }

  ctx.callbackQuery.message?.editText(`
    ‚ú® –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!
–û—Ç—Å—é–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõçÔ∏è –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§.
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è
`, {
    reply_markup: menuKeyboard
  });
})

// –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
// bot.on('message:text', (ctx) => {
//   ctx.reply(ctx.message.text);
// });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e);
  } else {
    console.error('Unknown error:', e);
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  const MONGODB_URI = process.env.MONGODB_URI;
  if (!MONGODB_URI) {
    throw new Error('MONGODB_URI is not defined in the environment variables');
  }

  try {
    await mongoose.connect(MONGODB_URI)
    console.log('Mongodb started');
    bot.start();
    console.log('Bot started');
  } catch (error) {
    console.error('Error in startBot:', error);
  }
}

startBot();
